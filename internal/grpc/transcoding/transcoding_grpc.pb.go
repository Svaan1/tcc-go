// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: internal/grpc/transcoding/transcoding.proto

package transcoding

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VideoTranscoding_Stream_FullMethodName      = "/transcoding.VideoTranscoding/Stream"
	VideoTranscoding_GetAllNodes_FullMethodName = "/transcoding.VideoTranscoding/GetAllNodes"
	VideoTranscoding_EnqueueJob_FullMethodName  = "/transcoding.VideoTranscoding/EnqueueJob"
)

// VideoTranscodingClient is the client API for VideoTranscoding service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoTranscodingClient interface {
	// Stream establishes a bidirectional communication channel between orchestrator and nodes
	Stream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[NodeMessage, OrchestratorMessage], error)
	GetAllNodes(ctx context.Context, in *GetAllNodesRequest, opts ...grpc.CallOption) (*GetAllNodesResponse, error)
	EnqueueJob(ctx context.Context, in *EnqueueJobRequest, opts ...grpc.CallOption) (*EnqueueJobResponse, error)
}

type videoTranscodingClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoTranscodingClient(cc grpc.ClientConnInterface) VideoTranscodingClient {
	return &videoTranscodingClient{cc}
}

func (c *videoTranscodingClient) Stream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[NodeMessage, OrchestratorMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &VideoTranscoding_ServiceDesc.Streams[0], VideoTranscoding_Stream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NodeMessage, OrchestratorMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type VideoTranscoding_StreamClient = grpc.BidiStreamingClient[NodeMessage, OrchestratorMessage]

func (c *videoTranscodingClient) GetAllNodes(ctx context.Context, in *GetAllNodesRequest, opts ...grpc.CallOption) (*GetAllNodesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllNodesResponse)
	err := c.cc.Invoke(ctx, VideoTranscoding_GetAllNodes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoTranscodingClient) EnqueueJob(ctx context.Context, in *EnqueueJobRequest, opts ...grpc.CallOption) (*EnqueueJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnqueueJobResponse)
	err := c.cc.Invoke(ctx, VideoTranscoding_EnqueueJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoTranscodingServer is the server API for VideoTranscoding service.
// All implementations must embed UnimplementedVideoTranscodingServer
// for forward compatibility.
type VideoTranscodingServer interface {
	// Stream establishes a bidirectional communication channel between orchestrator and nodes
	Stream(grpc.BidiStreamingServer[NodeMessage, OrchestratorMessage]) error
	GetAllNodes(context.Context, *GetAllNodesRequest) (*GetAllNodesResponse, error)
	EnqueueJob(context.Context, *EnqueueJobRequest) (*EnqueueJobResponse, error)
	mustEmbedUnimplementedVideoTranscodingServer()
}

// UnimplementedVideoTranscodingServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVideoTranscodingServer struct{}

func (UnimplementedVideoTranscodingServer) Stream(grpc.BidiStreamingServer[NodeMessage, OrchestratorMessage]) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedVideoTranscodingServer) GetAllNodes(context.Context, *GetAllNodesRequest) (*GetAllNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllNodes not implemented")
}
func (UnimplementedVideoTranscodingServer) EnqueueJob(context.Context, *EnqueueJobRequest) (*EnqueueJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnqueueJob not implemented")
}
func (UnimplementedVideoTranscodingServer) mustEmbedUnimplementedVideoTranscodingServer() {}
func (UnimplementedVideoTranscodingServer) testEmbeddedByValue()                          {}

// UnsafeVideoTranscodingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoTranscodingServer will
// result in compilation errors.
type UnsafeVideoTranscodingServer interface {
	mustEmbedUnimplementedVideoTranscodingServer()
}

func RegisterVideoTranscodingServer(s grpc.ServiceRegistrar, srv VideoTranscodingServer) {
	// If the following call pancis, it indicates UnimplementedVideoTranscodingServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VideoTranscoding_ServiceDesc, srv)
}

func _VideoTranscoding_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VideoTranscodingServer).Stream(&grpc.GenericServerStream[NodeMessage, OrchestratorMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type VideoTranscoding_StreamServer = grpc.BidiStreamingServer[NodeMessage, OrchestratorMessage]

func _VideoTranscoding_GetAllNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoTranscodingServer).GetAllNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoTranscoding_GetAllNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoTranscodingServer).GetAllNodes(ctx, req.(*GetAllNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoTranscoding_EnqueueJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnqueueJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoTranscodingServer).EnqueueJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoTranscoding_EnqueueJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoTranscodingServer).EnqueueJob(ctx, req.(*EnqueueJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VideoTranscoding_ServiceDesc is the grpc.ServiceDesc for VideoTranscoding service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoTranscoding_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transcoding.VideoTranscoding",
	HandlerType: (*VideoTranscodingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllNodes",
			Handler:    _VideoTranscoding_GetAllNodes_Handler,
		},
		{
			MethodName: "EnqueueJob",
			Handler:    _VideoTranscoding_EnqueueJob_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _VideoTranscoding_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "internal/grpc/transcoding/transcoding.proto",
}
